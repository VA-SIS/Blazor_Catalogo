@page "/categoria"
@inject ILogger<Categoria> logger
@inject HttpClient http

<div>
  <a class="btn btn-success" href="categoria/create">Nova Categoria</a>
</div>
<br />

<div class="form-inline">
    <label class="sr-only" for="filter-name">Filtro</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="nomeFiltro"
           placeholder="Filtrar pelo nome" />
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">
        Filtrar
    </button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimparFiltro">
        Limpar
    </button>
</div>

<br />

@if (categorias == null)
{
    <p><em>Carregando...</em></p>
}
else if (categorias.Count == 0)
{
    <p><em>Não existem categorias cadastradas...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descrição</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in categorias)
            {
                <tr>
                    <td>@categoria.Nome</td>
                    <td>@categoria.Descricao</td>
                    <td><a class="btn btn-primary" href="categoria/edit/@categoria.CategoriaId">Editar</a> </td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarCategoria(categoria.CategoriaId))" style="color:white">Deletar</a> </td>
                </tr>
            }
        </tbody>
    </table>
}

<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realmente excluir este item ?</div>
</Confirma>

<hr />

<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
           Raio="2" PaginaSelecionada="PaginaSelecionada">

</Paginacao>

<ExibeErro ErrorMessage="@errorMessage" />

@code {

    private string errorMessage = "";
    List<Categoria>? categorias { get; set; }

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;
    private string? nomeFiltro; // { get; set; }

    //Confirma? confirma;
    Confirma? confirma = new Confirma();

    protected override async Task OnInitializedAsync()
    {
        await CarregaCategorias();
    }

    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregaCategorias();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaCategorias();
    }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaCategorias(pagina);
    }

    public async Task CarregaCategorias(int pagina = 1, int quantidadePorPagina = 5)
    {
        try
        {
            var httpResponse = await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");

            var mensagem = httpResponse.RequestMessage;
            var erro = httpResponse.StatusCode;
            var alerta = httpResponse.Content;

            if (httpResponse.IsSuccessStatusCode)
            {
                if (httpResponse.Headers.TryGetValues("totalPaginas", out IEnumerable<string>? totalPaginasHeaderValues))
                {
                    if (totalPaginasHeaderValues != null && totalPaginasHeaderValues.Any())
                    {
                        QuantidadeTotalPaginas = int.Parse(totalPaginasHeaderValues.First());
                    }
                    else
                    {
                        logger.LogWarning("O cabeçalho 'totalPaginas' está vazio na resposta.");
                    }
                }
                else
                {
                    logger.LogWarning("O cabeçalho 'totalPaginas' não foi encontrado na resposta.");
                }

                var responseString = await httpResponse.Content.ReadAsStringAsync();

                categorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                             new JsonSerializerOptions()
                             {
                                  PropertyNameCaseInsensitive = true
                             });

                logger.LogInformation("Categorias carregadas com sucesso.");
            }
            else
            {
                errorMessage = $"Erro ao carregar categorias. StatusCode: {httpResponse.StatusCode}";
                logger.LogError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            logger.LogError(ex, "Erro ao carregar categorias.");
        }
    }

    int codigoCategoria;

    void DeletarCategoria(int categoriaId)
    {
        // Usando o operador coalescência nula(?) para simplificar o código
        // Com isso o código verifica automaticamente se confirma é nulo 
        // antes de chamar os métodos Exibir() ou Ocultar(). Se confirma 
        // for nulo, esses métodos não serão chamados, evitando assim o erro.
        confirma?.Exibir();
        codigoCategoria = categoriaId;
        logger.LogInformation("DeletarCategoria chamado para CategoriaId: {CategoriaId}", categoriaId);
    }

    async Task DeletaConfirma()
    {
        try
        {
            await http.DeleteAsync($"api/categoria/{codigoCategoria}");
            confirma?.Ocultar();
            await CarregaCategorias();
            logger.LogInformation("Categoria deletada com sucesso. CategoriaId: {CategoriaId}", codigoCategoria);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Erro ao deletar categoria. CategoriaId: {CategoriaId}", codigoCategoria);
        }
    }

    void CancelaConfirma()
    {
        confirma?.Ocultar();
        logger.LogInformation("Confirmação de exclusão cancelada.");
    }
}
