<EditForm Model="@Produto" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label form="nome">Nome: </label>
        <div>
            <InputText @bind-Value="Produto!.Nome" class="form-control" />
            <ValidationMessage For="@(()=> Produto.Nome)" />
        </div>
    </div>
    <div class="form-group">
        <label form="descricao">Descrição: </label>
        <div>
            <InputTextArea @bind-Value="Produto.Descricao" class="form-control" />
            <ValidationMessage For="@(()=> Produto.Descricao)" />
        </div>
    </div>
    <div class="form-group">
        <label form="preco">Preço: </label>
        <div>
            <InputNumber @bind-Value="Produto.Preco" class="form-control" />
            <ValidationMessage For="@(()=> Produto.Preco)" />
        </div>
    </div>
    <div class="form-group">
        <label form="categoria">Categoria: </label>
        <select @onchange="CategoriaSelectionChanged" class="form-control">
            @if (categorias != null)
            {
                @foreach (var categoria in categorias)
                {
                    <option value="@categoria.CategoriaId"
                    selected="@(categoria.CategoriaId == Produto.CategoriaId ? true : false)">
                        @categoria.Nome
                    </option>
                }
            }
        </select>
    </div>
    <div class="form-group row">
        <InputFile OnChange="@CarregaImagem"></InputFile>
    </div>

    <div class="col-2">
        <ImagemFoto ImagemRemota="@Produto.ImagemUrl" />
    </div>
    <br />
    <button type="submit" class="btn btn-success">
        @ButtonTextSubmit
    </button>
    <button class="btn btn-danger"
            @onclick="@(()=> navigation!.NavigateTo("Produto"))">
        @ButtonTextCancelar
    </button>
</EditForm>

@code {

    List<Categoria>? categorias;

    [Inject]
    public HttpClient http { get; set; }

    [Parameter]
    public Produto? Produto { get; set; }

    [Parameter]
    public string ButtonTextSubmit { get; set; } = "Salvar";

    [Parameter]
    public string ButtonTextCancelar { get; set; } = "Cancelar";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string? ImagemRemota { get; set; }

    [Inject]
    private ILogger<ProdutoForm>? logger { get; set; }


    long maxFileSize = 1024 * 1024 * 15;

    async Task CarregaImagem(InputFileChangeEventArgs e)
    {
        try
        {
            var format = "image/jpeg";
            var imageFile = await e.File.RequestImageFileAsync(format, 640, 480);

            using var fileStream = imageFile.OpenReadStream(maxFileSize);
            using var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);

            ImagemRemota = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

            if (ImagemRemota != null)
            {
                Produto!.ImagemUrl = ImagemRemota;
                ImagemRemota = null;
            }
        }
        catch (Exception ex)
        {
            logger?.LogError(ex, "Erro ao carregar a imagem do produto.");
        }

    }

    private void ImagemSelecionada(string imagemBase64)
    {
        Produto!.ImagemUrl = imagemBase64;
        ImagemRemota = null;
        Produto.CategoriaId = categorias![0].CategoriaId;
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            Produto!.ImagemUrl = null;
            await CarregaCategorias();
            if (Produto!.CategoriaId == 0 && categorias != null && categorias.Count > 0)
            {
                Produto.CategoriaId = categorias[0].CategoriaId;
                logger?.LogInformation("Categoria padrão definida para: {CategoriaId}", categorias[0].CategoriaId);
            }
            else
            {
                logger?.LogInformation("Categorias carregadas com sucesso.");
            }
        }
        catch (Exception ex)
        {
            logger?.LogError(ex, "Erro ao inicializar o componente ProdutoForm.");
        }
    }

    private async Task CarregaCategorias()
    {
        try
        {
            var resultado = await http.GetFromJsonAsync<List<Categoria>>("api/categoria/todas");
            categorias = resultado ?? new List<Categoria>();
        }
        catch (Exception ex)
        {
            logger?.LogError(ex, "Erro ao carregar as categorias.");
            categorias = new List<Categoria>();
        }
    }

    //Isso verifica se e.Value pode ser convertido para uma string (string) antes da conversão.
    void CategoriaSelectionChanged(ChangeEventArgs e)
    {
        try
        {
            if (e.Value is string value && int.TryParse(value, out int id))
            {
                Produto!.CategoriaId = id;
                logger?.LogInformation("Categoria selecionada alterada para: {CategoriaId}", id);
            }
        }
        catch (Exception ex)
        {
            logger?.LogError(ex, "Erro ao alterar a seleção da categoria.");
        }
    }
}
